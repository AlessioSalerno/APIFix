Configuration: 
---- UseAdditionalOutput: False
---- UseAdditionalInput : True
---- OnlyNewUsage       : False
---- GivenExample       : 1
---- UseTypedUsage      : False
---- NewKeyWords        : 
---- OldKeyWords        : 
---- OldUsageThreashold : 0.15
---- NewUsageThreashold : 0.25
load 16 relevant edits!
load 271 old relevant usages
Log: invoke synthesis engine...
Log: the size of unRolledEdits is: 16
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg => cfg.CreateMap<EnumTestSource, EnumTestDest>()
                    .ForMember(m => m.Prop1, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c1Called = true; return srcProp != null; });
                        o.ResolveUsing(f => f.Prop1?.Aggregate((current, next) => current | next));
                    })
                    .ForMember(m => m.Prop2, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c2Called = true; return srcProp != null; });
                        o.ResolveUsing(f => f.Prop2?.Aggregate((current, next) => current | next));
                    }));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<EnumTestSource, EnumTestDest>()
                    .ForMember(m => m.Prop1, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c1Called = true; return srcProp != null; });
                        o.MapFrom((f, _) => f.Prop1?.Aggregate((current, next) => current | next));
                    })
                    .ForMember(m => m.Prop2, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c2Called = true; return srcProp != null; });
                        o.MapFrom((f, _) => f.Prop2?.Aggregate((current, next) => current | next));
                    }));

============= Cluster end ==============

Log: ============== Cluster start ==============
o.ResolveUsing(f => f.Prop1 ?.Aggregate((current, next) => current | next))
----------------
o.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))

old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: map.ResolveUsing < PriceResolver >()
old usages: map.ResolveUsing < PriceResolver >()
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
============= Cluster end ==============

Old usage: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; }:Block
Log: Subsititution: f:Parameter -> z:Parameter
Log: Subsititution: o:IdentifierName -> y:IdentifierName
Correponding output: y.MapFrom((z, _) => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Old usage: map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> s.Users ?.Count ?? 0:CoalesceExpression
Log: Subsititution: f:Parameter -> s:Parameter
Log: Subsititution: o:IdentifierName -> map:IdentifierName
Correponding output: map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Old usage: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue:CoalesceExpression
Log: Subsititution: f:Parameter -> n:Parameter
Log: Subsititution: o:IdentifierName -> s:IdentifierName
Correponding output: s.MapFrom((n, _) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Old usage: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):SimpleLambdaExpression -> (s, v) => String.IsNullOrEmpty(s.Definition):ParenthesizedLambdaExpression
Log: Subsititution: o:IdentifierName -> e:IdentifierName
Correponding output: e.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now:CoalesceExpression
Log: Subsititution: f:Parameter -> s:Parameter
Log: Subsititution: o:IdentifierName -> e:IdentifierName
Correponding output: e.MapFrom((s, _) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Old usage: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now:CoalesceExpression
Log: Subsititution: f:Parameter -> u:Parameter
Log: Subsititution: o:IdentifierName -> s:IdentifierName
Correponding output: s.MapFrom((u, _) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Old usage: map.ResolveUsing < PriceResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < PriceResolver >:GenericName
Log: Subsititution: o:IdentifierName -> map:IdentifierName
Correponding output: map.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase):InvocationExpression
Log: Subsititution: f:Parameter -> x:Parameter
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((x, _) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Old usage: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> x.Type.ParseToEnum < TransactionType >():InvocationExpression
Log: Subsititution: f:Parameter -> x:Parameter
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((x, _) => x.Type.ParseToEnum < TransactionType >())
Old usage: opt.ResolveUsing < DbGeographyValueResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < DbGeographyValueResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < GeoLocationValueResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < GeoLocationValueResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < CoordinatesValueResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < CoordinatesValueResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: config.ResolveUsing < UpdateDateResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < UpdateDateResolver >:GenericName
Log: Subsititution: o:IdentifierName -> config:IdentifierName
Correponding output: config.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> src.PhotoName:SimpleMemberAccessExpression
Log: Subsititution: f:Parameter -> src:Parameter
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ProfilePhotoUrlResolver, string >:GenericName
Log: Subsititution: o:IdentifierName -> cfg:IdentifierName
Correponding output: cfg.MapFrom((src, _) => src.PhotoName)
Old usage: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id:ConditionalExpression
Log: Subsititution: f:Parameter -> src:Parameter
Log: Subsititution: o:IdentifierName -> mo:IdentifierName
Correponding output: mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Old usage: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):SimpleLambdaExpression -> typeof(InjectImageBaseForTripResolver):TypeOfExpression
Log: Subsititution: o:IdentifierName -> op:IdentifierName
Correponding output: op.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < FileExtensionResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < FileExtensionResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < ApproveResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ApproveResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input):InvocationExpression
Log: Subsititution: f:Parameter -> input:Parameter
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Old usage: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> input.CreationTime.ToLongDateString():InvocationExpression
Log: Subsititution: f:Parameter -> input:Parameter
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((input, _) => input.CreationTime.ToLongDateString())
Old usage: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0:GreaterThanExpression
Log: Subsititution: f:Parameter -> input:Parameter
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((input, _) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Old usage: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):SimpleLambdaExpression -> new TitleLengthResolve(titleLimit):ObjectCreationExpression
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> input.CreationTime.ToShortDateString():InvocationExpression
Log: Subsititution: f:Parameter -> input:Parameter
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Old usage: opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> src.Password ?.ConvertToString():ConditionalAccessExpression
Log: Subsititution: f:Parameter -> src:Parameter
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Old usage: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> DateTime.UtcNow - e.Started:SubtractExpression
Log: Subsititution: f:Parameter -> e:Parameter
Log: Subsititution: o:IdentifierName -> o:IdentifierName
Correponding output: o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Old usage: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> t.Logos ?.Select(l => l.Name).ToArray():ConditionalAccessExpression
Log: Subsititution: f:Parameter -> t:Parameter
Log: Subsititution: o:IdentifierName -> o:IdentifierName
Correponding output: o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Old usage: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors):InvocationExpression
Log: Subsititution: f:Parameter -> s:Parameter
Log: Subsititution: o:IdentifierName -> c:IdentifierName
Correponding output: c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Old usage: opt.ResolveUsing < ExtendedDataResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ExtendedDataResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < WarehouseCatalogIsDefaultResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < OfferSettingsOfferExpiresResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < GatewayMethodDialogEditorViewResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < EntityTypeFieldResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < EntityTypeFieldResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < AgeResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < AgeResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing < DispositionResolver >()
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < DispositionResolver >:GenericName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: opt.ResolveUsing(ResolveCaseSummary)
Log: Subsititution: f => f.Prop1 ?.Aggregate((current, next) => current | next):SimpleLambdaExpression -> ResolveCaseSummary:IdentifierName
Log: Subsititution: o:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Old usage: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> ! string.IsNullOrWhiteSpace(r.PasswordHash):LogicalNotExpression
Log: Subsititution: f:Parameter -> r:Parameter
Log: Subsititution: o:IdentifierName -> m:IdentifierName
Correponding output: m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Old usage: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: Subsititution: f.Prop1 ?.Aggregate((current, next) => current | next):ConditionalAccessExpression -> { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } }:Block
Log: Subsititution: f:Parameter -> cc:Parameter
Log: Subsititution: o:IdentifierName -> ce:IdentifierName
Correponding output: ce.MapFrom((cc, _) => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: Input to synthesize the program:
Log: o.ResolveUsing(f => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: ---------------------
Log: o.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: ---------------------
Log: y.MapFrom((z, _) => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: ---------------------
Log: map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: ---------------------
Log: s.MapFrom((n, _) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: ---------------------
Log: e.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: ---------------------
Log: e.MapFrom((s, _) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: ---------------------
Log: s.MapFrom((u, _) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: map.ResolveUsing < PriceResolver >()
Log: ---------------------
Log: map.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: ---------------------
Log: opt.MapFrom((x, _) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: ---------------------
Log: opt.MapFrom((x, _) => x.Type.ParseToEnum < TransactionType >())
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is y.MapFrom((z, _) => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is y.MapFrom((z, _) => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((s, _) => s.Users ?.Count ?? 0)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((n, _) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is e.MapFrom((s, v) => String.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next)))
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((s, _) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((u, _) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((n, _) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is e.MapFrom((s, v) => String.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next)))
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((s, _) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((u, _) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((n, _) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((s, _) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((u, _) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((n, _) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((s, _) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((u, _) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((s, _) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((u, _) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((n, _) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((x, _) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((x, _) => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((x, _) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((x, _) => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((x, _) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((x, _) => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((x, _) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((x, _) => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((x, _) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((x, _) => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((x, _) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((x, _) => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, _) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((input, _) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((input, _) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((input, _) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((input, _) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((input, _) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((input, _) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((input, _) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((input, _) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((input, _) => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, _) => src.Password ?.ConvertToString())
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((e, _) => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((t, _) => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((s, _) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((r, _) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom((cc, _) => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom((cc, _) => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom((cc, _) => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: ============== Cluster start ==============
- var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt => opt.ResolveUsing(src =>
                {
                    var rev = src.Value + 3;
                    return rev;
                })))
                .CreateMapper();
----------------
+ var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt => opt.MapFrom((src, ctxt) =>
                {
                    var rev = src.Value + 3;
                    return rev;
                })))
                .CreateMapper();

============= Cluster end ==============

Log: ============== Cluster start ==============
opt.ResolveUsing(src => { var rev = src.Value + 3; return rev; })
----------------
opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })

old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: map.ResolveUsing < PriceResolver >()
old usages: map.ResolveUsing < PriceResolver >()
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
============= Cluster end ==============

Old usage: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; }:Block
Log: Subsititution: src:Parameter -> z:Parameter
Log: Subsititution: opt:IdentifierName -> y:IdentifierName
Correponding output: y.MapFrom((z, ctxt) => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Old usage: map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> s.Users ?.Count ?? 0:CoalesceExpression
Log: Subsititution: src:Parameter -> s:Parameter
Log: Subsititution: opt:IdentifierName -> map:IdentifierName
Correponding output: map.MapFrom((s, ctxt) => s.Users ?.Count ?? 0)
Old usage: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue:CoalesceExpression
Log: Subsititution: src:Parameter -> n:Parameter
Log: Subsititution: opt:IdentifierName -> s:IdentifierName
Correponding output: s.MapFrom((n, ctxt) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Old usage: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:SimpleLambdaExpression -> (s, v) => String.IsNullOrEmpty(s.Definition):ParenthesizedLambdaExpression
Log: Subsititution: opt:IdentifierName -> e:IdentifierName
Correponding output: e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now:CoalesceExpression
Log: Subsititution: src:Parameter -> s:Parameter
Log: Subsititution: opt:IdentifierName -> e:IdentifierName
Correponding output: e.MapFrom((s, ctxt) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Old usage: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now:CoalesceExpression
Log: Subsititution: src:Parameter -> u:Parameter
Log: Subsititution: opt:IdentifierName -> s:IdentifierName
Correponding output: s.MapFrom((u, ctxt) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Old usage: map.ResolveUsing < PriceResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < PriceResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> map:IdentifierName
Correponding output: map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase):InvocationExpression
Log: Subsititution: src:Parameter -> x:Parameter
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((x, ctxt) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Old usage: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> x.Type.ParseToEnum < TransactionType >():InvocationExpression
Log: Subsititution: src:Parameter -> x:Parameter
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((x, ctxt) => x.Type.ParseToEnum < TransactionType >())
Old usage: opt.ResolveUsing < DbGeographyValueResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < DbGeographyValueResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < GeoLocationValueResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < GeoLocationValueResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < CoordinatesValueResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < CoordinatesValueResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: config.ResolveUsing < UpdateDateResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < UpdateDateResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> config:IdentifierName
Correponding output: config.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> src.PhotoName:SimpleMemberAccessExpression
Log: Subsititution: src:Parameter -> src:Parameter
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ProfilePhotoUrlResolver, string >:GenericName
Log: Subsititution: opt:IdentifierName -> cfg:IdentifierName
Correponding output: cfg.MapFrom((src, ctxt) => src.PhotoName)
Old usage: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id:ConditionalExpression
Log: Subsititution: src:Parameter -> src:Parameter
Log: Subsititution: opt:IdentifierName -> mo:IdentifierName
Correponding output: mo.MapFrom((src, ctxt) => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Old usage: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:SimpleLambdaExpression -> typeof(InjectImageBaseForTripResolver):TypeOfExpression
Log: Subsititution: opt:IdentifierName -> op:IdentifierName
Correponding output: op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < FileExtensionResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < FileExtensionResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < ApproveResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ApproveResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input):InvocationExpression
Log: Subsititution: src:Parameter -> input:Parameter
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((input, ctxt) => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Old usage: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> input.CreationTime.ToLongDateString():InvocationExpression
Log: Subsititution: src:Parameter -> input:Parameter
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((input, ctxt) => input.CreationTime.ToLongDateString())
Old usage: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0:GreaterThanExpression
Log: Subsititution: src:Parameter -> input:Parameter
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((input, ctxt) => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Old usage: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:SimpleLambdaExpression -> new TitleLengthResolve(titleLimit):ObjectCreationExpression
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> input.CreationTime.ToShortDateString():InvocationExpression
Log: Subsititution: src:Parameter -> input:Parameter
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((input, ctxt) => input.CreationTime.ToShortDateString())
Old usage: opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> src.Password ?.ConvertToString():ConditionalAccessExpression
Log: Subsititution: src:Parameter -> src:Parameter
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => src.Password ?.ConvertToString())
Old usage: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> DateTime.UtcNow - e.Started:SubtractExpression
Log: Subsititution: src:Parameter -> e:Parameter
Log: Subsititution: opt:IdentifierName -> o:IdentifierName
Correponding output: o.MapFrom((e, ctxt) => DateTime.UtcNow - e.Started)
Old usage: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> t.Logos ?.Select(l => l.Name).ToArray():ConditionalAccessExpression
Log: Subsititution: src:Parameter -> t:Parameter
Log: Subsititution: opt:IdentifierName -> o:IdentifierName
Correponding output: o.MapFrom((t, ctxt) => t.Logos ?.Select(l => l.Name).ToArray())
Old usage: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors):InvocationExpression
Log: Subsititution: src:Parameter -> s:Parameter
Log: Subsititution: opt:IdentifierName -> c:IdentifierName
Correponding output: c.MapFrom((s, ctxt) => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Old usage: opt.ResolveUsing < ExtendedDataResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ExtendedDataResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < WarehouseCatalogIsDefaultResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < OfferSettingsOfferExpiresResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < GatewayMethodDialogEditorViewResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < EntityTypeFieldResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < EntityTypeFieldResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < AgeResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < AgeResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing < DispositionResolver >()
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:Argument -> ):CloseParenToken
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < DispositionResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: opt.ResolveUsing(ResolveCaseSummary)
Log: Subsititution: src => { var rev = src.Value + 3; return rev; }:SimpleLambdaExpression -> ResolveCaseSummary:IdentifierName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Old usage: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> ! string.IsNullOrWhiteSpace(r.PasswordHash):LogicalNotExpression
Log: Subsititution: src:Parameter -> r:Parameter
Log: Subsititution: opt:IdentifierName -> m:IdentifierName
Correponding output: m.MapFrom((r, ctxt) => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Old usage: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: Subsititution: { var rev = src.Value + 3; return rev; }:Block -> { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } }:Block
Log: Subsititution: src:Parameter -> cc:Parameter
Log: Subsititution: opt:IdentifierName -> ce:IdentifierName
Correponding output: ce.MapFrom((cc, ctxt) => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: Input to synthesize the program:
Log: opt.ResolveUsing(src => { var rev = src.Value + 3; return rev; })
Log: ---------------------
Log: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: ---------------------
Log: y.MapFrom((z, ctxt) => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: ---------------------
Log: map.MapFrom((s, ctxt) => s.Users ?.Count ?? 0)
Log: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: ---------------------
Log: s.MapFrom((n, ctxt) => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: ---------------------
Log: e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: ---------------------
Log: e.MapFrom((s, ctxt) => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: ---------------------
Log: s.MapFrom((u, ctxt) => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: map.ResolveUsing < PriceResolver >()
Log: ---------------------
Log: map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: ---------------------
Log: opt.MapFrom((x, ctxt) => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: ---------------------
Log: opt.MapFrom((x, ctxt) => x.Type.ParseToEnum < TransactionType >())
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is y.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is y.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: ============== Cluster start ==============
- var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt =>
                    opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
                ))
                .CreateMapper();
----------------
+ var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt =>
                    opt.MapFrom((src, ctx) => ctx.Items[itemKey])
                ))
                .CreateMapper();

============= Cluster end ==============

Log: ============== Cluster start ==============
opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
----------------
opt.MapFrom((src, ctx) => ctx.Items[itemKey])

opt.ResolveUsing((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
----------------
opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)

opt.ResolveUsing((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
----------------
opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)

old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: map.ResolveUsing < PriceResolver >()
old usages: map.ResolveUsing < PriceResolver >()
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
============= Cluster end ==============

Old usage: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; }):ArgumentList
Log: Subsititution: opt:IdentifierName -> y:IdentifierName
Correponding output: y.MapFrom(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Old usage: map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (s => s.Users ?.Count ?? 0):ArgumentList
Log: Subsititution: opt:IdentifierName -> map:IdentifierName
Correponding output: map.MapFrom(s => s.Users ?.Count ?? 0)
Old usage: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue):ArgumentList
Log: Subsititution: opt:IdentifierName -> s:IdentifierName
Correponding output: s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Old usage: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ((s, v) => String.IsNullOrEmpty(s.Definition)):ArgumentList
Log: Subsititution: opt:IdentifierName -> e:IdentifierName
Correponding output: e.MapFrom((s, v) => String.IsNullOrEmpty(s.Definition))
Old usage: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now):ArgumentList
Log: Subsititution: opt:IdentifierName -> e:IdentifierName
Correponding output: e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Old usage: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now):ArgumentList
Log: Subsititution: opt:IdentifierName -> s:IdentifierName
Correponding output: s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Old usage: map.ResolveUsing < PriceResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < PriceResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> map:IdentifierName
Correponding output: map.MapFrom()
Old usage: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase)):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Old usage: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (x => x.Type.ParseToEnum < TransactionType >()):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Old usage: opt.ResolveUsing < DbGeographyValueResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < DbGeographyValueResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < GeoLocationValueResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < GeoLocationValueResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < CoordinatesValueResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < CoordinatesValueResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: config.ResolveUsing < UpdateDateResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < UpdateDateResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> config:IdentifierName
Correponding output: config.MapFrom()
Old usage: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (src => src.PhotoName):ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ProfilePhotoUrlResolver, string >:GenericName
Log: Subsititution: opt:IdentifierName -> cfg:IdentifierName
Correponding output: cfg.MapFrom(src => src.PhotoName)
Old usage: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id):ArgumentList
Log: Subsititution: opt:IdentifierName -> mo:IdentifierName
Correponding output: mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Old usage: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (typeof(InjectImageBaseForTripResolver)):ArgumentList
Log: Subsititution: opt:IdentifierName -> op:IdentifierName
Correponding output: op.MapFrom(typeof(InjectImageBaseForTripResolver))
Old usage: opt.ResolveUsing < FileExtensionResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < FileExtensionResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < ApproveResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ApproveResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input)):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Old usage: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (input => input.CreationTime.ToLongDateString()):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(input => input.CreationTime.ToLongDateString())
Old usage: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Old usage: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (new TitleLengthResolve(titleLimit)):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(new TitleLengthResolve(titleLimit))
Old usage: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (input => input.CreationTime.ToShortDateString()):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(input => input.CreationTime.ToShortDateString())
Old usage: opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (src => src.Password ?.ConvertToString()):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(src => src.Password ?.ConvertToString())
Old usage: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (e => DateTime.UtcNow - e.Started):ArgumentList
Log: Subsititution: opt:IdentifierName -> o:IdentifierName
Correponding output: o.MapFrom(e => DateTime.UtcNow - e.Started)
Old usage: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (t => t.Logos ?.Select(l => l.Name).ToArray()):ArgumentList
Log: Subsititution: opt:IdentifierName -> o:IdentifierName
Correponding output: o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Old usage: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors)):ArgumentList
Log: Subsititution: opt:IdentifierName -> c:IdentifierName
Correponding output: c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Old usage: opt.ResolveUsing < ExtendedDataResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < ExtendedDataResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < WarehouseCatalogIsDefaultResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < OfferSettingsOfferExpiresResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < GatewayMethodDialogEditorViewResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < EntityTypeFieldResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < EntityTypeFieldResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < AgeResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < AgeResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing < DispositionResolver >()
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> ():ArgumentList
Log: Subsititution: ResolveUsing:IdentifierName -> ResolveUsing < DispositionResolver >:GenericName
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom()
Old usage: opt.ResolveUsing(ResolveCaseSummary)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (ResolveCaseSummary):ArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom(ResolveCaseSummary)
Old usage: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (r => ! string.IsNullOrWhiteSpace(r.PasswordHash)):ArgumentList
Log: Subsititution: opt:IdentifierName -> m:IdentifierName
Correponding output: m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Old usage: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } }):ArgumentList
Log: Subsititution: opt:IdentifierName -> ce:IdentifierName
Correponding output: ce.MapFrom(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Old usage: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (new ValueResolver(), pm.SourceMember.Name):ArgumentList
Log: Subsititution: opt:IdentifierName -> c:IdentifierName
Correponding output: c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Old usage: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: Subsititution: ((src, ctx) => ctx.Items[itemKey]):ArgumentList -> (new IgnoreNullResolver(), pm.SourceMember.Name):ArgumentList
Log: Subsititution: opt:IdentifierName -> c:IdentifierName
Correponding output: c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: Input to synthesize the program:
Log: opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
Log: ---------------------
Log: opt.MapFrom((src, ctx) => ctx.Items[itemKey])
Log: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: ---------------------
Log: y.MapFrom(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: ---------------------
Log: map.MapFrom(s => s.Users ?.Count ?? 0)
Log: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: ---------------------
Log: s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: ---------------------
Log: e.MapFrom((s, v) => String.IsNullOrEmpty(s.Definition))
Log: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: ---------------------
Log: e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: ---------------------
Log: s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: map.ResolveUsing < PriceResolver >()
Log: ---------------------
Log: map.MapFrom()
Log: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: ---------------------
Log: opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: ---------------------
Log: opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
Log: output  is opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
Log: ----------------------------------------------------
Log: predict is opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
Log: output  is opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
Log: ----------------------------------------------------
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is y.MapFrom(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is y.MapFrom(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is e.MapFrom((s, v) => String.IsNullOrEmpty(s.Definition))
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is e.MapFrom((s, v) => String.IsNullOrEmpty(s.Definition))
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom()
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom()
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom()
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom(src => src.PhotoName)
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom(src => src.PhotoName)
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom(src => src.PhotoName)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom()
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom()
Log: old usage is c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.ResolveUsing<ContextResolver, int>(src => src.Value));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.MapFrom<ContextResolver, int>(src => src.Value));
                });

============= Cluster end ==============

Log: ============== Cluster start ==============
- opt.ResolveUsing<ContextResolver, int>(src => src.Value)
----------------
+ opt.MapFrom<ContextResolver, int>(src => src.Value)

- options.ResolveUsing<DtoStatusValueResolver>()
----------------
+ options.MapFrom<DtoStatusValueResolver>()

- options.ResolveUsing<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)
----------------
+ options.MapFrom<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)

old usages: map.ResolveUsing < PriceResolver >()
old usages: map.ResolveUsing < PriceResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
============= Cluster end ==============

Old usage: map.ResolveUsing < PriceResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < PriceResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> map:IdentifierName
Correponding output: map.MapFrom < PriceResolver >()
Old usage: opt.ResolveUsing < DbGeographyValueResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < DbGeographyValueResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < DbGeographyValueResolver >()
Old usage: opt.ResolveUsing < GeoLocationValueResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < GeoLocationValueResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < GeoLocationValueResolver >()
Old usage: opt.ResolveUsing < CoordinatesValueResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < CoordinatesValueResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < CoordinatesValueResolver >()
Old usage: config.ResolveUsing < UpdateDateResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < UpdateDateResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> config:IdentifierName
Correponding output: config.MapFrom < UpdateDateResolver >()
Old usage: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: Subsititution: (src => src.Value):ArgumentList -> (src => src.PhotoName):ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < ProfilePhotoUrlResolver, string >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> cfg:IdentifierName
Correponding output: cfg.MapFrom < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Old usage: opt.ResolveUsing < FileExtensionResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < FileExtensionResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < FileExtensionResolver >()
Old usage: opt.ResolveUsing < ApproveResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < ApproveResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < ApproveResolver >()
Old usage: opt.ResolveUsing < ExtendedDataResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < ExtendedDataResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < ExtendedDataResolver >()
Old usage: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < WarehouseCatalogIsDefaultResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < WarehouseCatalogIsDefaultResolver >()
Old usage: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < OfferSettingsOfferExpiresResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < OfferSettingsOfferExpiresResolver >()
Old usage: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < GatewayMethodDialogEditorViewResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < GatewayMethodDialogEditorViewResolver >()
Old usage: opt.ResolveUsing < EntityTypeFieldResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < EntityTypeFieldResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < EntityTypeFieldResolver >()
Old usage: opt.ResolveUsing < AgeResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < AgeResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < AgeResolver >()
Old usage: opt.ResolveUsing < DispositionResolver >()
Log: Subsititution: (src => src.Value):ArgumentList -> ():ArgumentList
Log: Subsititution: < ContextResolver, int >:TypeArgumentList -> < DispositionResolver >:TypeArgumentList
Log: Subsititution: opt:IdentifierName -> opt:IdentifierName
Correponding output: opt.MapFrom < DispositionResolver >()
Log: Input to synthesize the program:
Log: opt.ResolveUsing < ContextResolver, int >(src => src.Value)
Log: ---------------------
Log: opt.MapFrom < ContextResolver, int >(src => src.Value)
Log: map.ResolveUsing < PriceResolver >()
Log: ---------------------
Log: map.MapFrom < PriceResolver >()
Log: opt.ResolveUsing < DbGeographyValueResolver >()
Log: ---------------------
Log: opt.MapFrom < DbGeographyValueResolver >()
Log: opt.ResolveUsing < GeoLocationValueResolver >()
Log: ---------------------
Log: opt.MapFrom < GeoLocationValueResolver >()
Log: opt.ResolveUsing < CoordinatesValueResolver >()
Log: ---------------------
Log: opt.MapFrom < CoordinatesValueResolver >()
Log: config.ResolveUsing < UpdateDateResolver >()
Log: ---------------------
Log: config.MapFrom < UpdateDateResolver >()
Log: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: ---------------------
Log: cfg.MapFrom < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: opt.ResolveUsing < FileExtensionResolver >()
Log: ---------------------
Log: opt.MapFrom < FileExtensionResolver >()
Log: opt.ResolveUsing < ApproveResolver >()
Log: ---------------------
Log: opt.MapFrom < ApproveResolver >()
Log: opt.ResolveUsing < ExtendedDataResolver >()
Log: ---------------------
Log: opt.MapFrom < ExtendedDataResolver >()
Log: predict is options.MapFrom < DtoStatusValueResolver >()
Log: output  is options.MapFrom < DtoStatusValueResolver >()
Log: ----------------------------------------------------
Log: predict is options.MapFrom < EnumValueResolver < Status, StatusForDto >, Status >(m => m.Status)
Log: output  is options.MapFrom < EnumValueResolver < Status, StatusForDto >, Status >(m => m.Status)
Log: ----------------------------------------------------
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom < PriceResolver >()
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom < PriceResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom < FileExtensionResolver >()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom < ApproveResolver >()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom < ApproveResolver >()
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom < FileExtensionResolver >()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom < ApproveResolver >()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom < ApproveResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom < WarehouseCatalogIsDefaultResolver >()
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom < OfferSettingsOfferExpiresResolver >()
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom < GatewayMethodDialogEditorViewResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom < EntityTypeFieldResolver >()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom < EntityTypeFieldResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom < WarehouseCatalogIsDefaultResolver >()
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom < OfferSettingsOfferExpiresResolver >()
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom < GatewayMethodDialogEditorViewResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom < EntityTypeFieldResolver >()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom < EntityTypeFieldResolver >()
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom < AgeResolver >()
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom < DispositionResolver >()
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom < AgeResolver >()
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom < DispositionResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.ResolveUsing((src, d, member, ctxt) => (int)ctxt.Items["Item"] + 5));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.MapFrom((src, d, member, ctxt) => (int)ctxt.Items["Item"] + 5));
                });

- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value1, opt => opt.ResolveUsing((source, d, dMember, context) => (int)context.Options.Items["Item"] + source.Value1));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value1, opt => opt.MapFrom((source, d, dMember, context) => (int)context.Options.Items["Item"] + source.Value1));
                });

============= Cluster end ==============

Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.ResolveUsing<DtoStatusValueResolver>()));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.MapFrom<DtoStatusValueResolver>()));

- var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.ResolveUsing<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.MapFrom<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)));

============= Cluster end ==============

total correct cases : 4 totalTestCases 4 Successful rate is 1
The successful rate for transforming old usages: 271 / 271

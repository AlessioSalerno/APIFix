Configuration: 
---- UseAdditionalOutput: False
---- UseAdditionalInput : False
---- OnlyNewUsage       : False
---- GivenExample       : 1
---- UseTypedUsage      : False
---- NewKeyWords        : 
---- OldKeyWords        : 
---- OldUsageThreashold : 0.15
---- NewUsageThreashold : 0.25
load 16 relevant edits!
load 271 old relevant usages
Log: invoke synthesis engine...
Log: the size of unRolledEdits is: 16
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage map.ResolveUsing < PriceResolver >()
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < FileExtensionResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing < ApproveResolver >()
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < ExtendedDataResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < EntityTypeFieldResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < AgeResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing < DispositionResolver >()
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage opt.ResolveUsing(ResolveCaseSummary)
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < DbGeographyValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < GeoLocationValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage opt.ResolveUsing < CoordinatesValueResolver >()
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage config.ResolveUsing < UpdateDateResolver >()
Log: add old usage c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: add old usage c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg => cfg.CreateMap<EnumTestSource, EnumTestDest>()
                    .ForMember(m => m.Prop1, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c1Called = true; return srcProp != null; });
                        o.ResolveUsing(f => f.Prop1?.Aggregate((current, next) => current | next));
                    })
                    .ForMember(m => m.Prop2, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c2Called = true; return srcProp != null; });
                        o.ResolveUsing(f => f.Prop2?.Aggregate((current, next) => current | next));
                    }));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<EnumTestSource, EnumTestDest>()
                    .ForMember(m => m.Prop1, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c1Called = true; return srcProp != null; });
                        o.MapFrom((f, _) => f.Prop1?.Aggregate((current, next) => current | next));
                    })
                    .ForMember(m => m.Prop2, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c2Called = true; return srcProp != null; });
                        o.MapFrom((f, _) => f.Prop2?.Aggregate((current, next) => current | next));
                    }));

============= Cluster end ==============

Log: ============== Cluster start ==============
o.ResolveUsing(f => f.Prop1 ?.Aggregate((current, next) => current | next))
----------------
o.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))

old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: map.ResolveUsing < PriceResolver >()
old usages: map.ResolveUsing < PriceResolver >()
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
============= Cluster end ==============

Log: Input to synthesize the program:
Log: o.ResolveUsing(f => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: ---------------------
Log: o.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is null
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is null
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is null
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is null
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: ============== Cluster start ==============
- var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt => opt.ResolveUsing(src =>
                {
                    var rev = src.Value + 3;
                    return rev;
                })))
                .CreateMapper();
----------------
+ var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt => opt.MapFrom((src, ctxt) =>
                {
                    var rev = src.Value + 3;
                    return rev;
                })))
                .CreateMapper();

============= Cluster end ==============

Log: ============== Cluster start ==============
opt.ResolveUsing(src => { var rev = src.Value + 3; return rev; })
----------------
opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })

old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: map.ResolveUsing < PriceResolver >()
old usages: map.ResolveUsing < PriceResolver >()
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
============= Cluster end ==============

Log: Input to synthesize the program:
Log: opt.ResolveUsing(src => { var rev = src.Value + 3; return rev; })
Log: ---------------------
Log: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is null
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is null
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is null
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is null
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is null
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is null
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is null
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is null
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is null
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is null
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: ============== Cluster start ==============
- var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt =>
                    opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
                ))
                .CreateMapper();
----------------
+ var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt =>
                    opt.MapFrom((src, ctx) => ctx.Items[itemKey])
                ))
                .CreateMapper();

============= Cluster end ==============

Log: ============== Cluster start ==============
opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
----------------
opt.MapFrom((src, ctx) => ctx.Items[itemKey])

opt.ResolveUsing((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
----------------
opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)

opt.ResolveUsing((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
----------------
opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)

old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: map.ResolveUsing(s => s.Users ?.Count ?? 0)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
old usages: s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
old usages: s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
old usages: map.ResolveUsing < PriceResolver >()
old usages: map.ResolveUsing < PriceResolver >()
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
old usages: opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
old usages: opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
old usages: opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
old usages: opt.ResolveUsing(new TitleLengthResolve(titleLimit))
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: opt.ResolveUsing(src => src.Password ?.ConvertToString())
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: o.ResolveUsing(e => DateTime.UtcNow - e.Started)
old usages: o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
old usages: c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: opt.ResolveUsing(ResolveCaseSummary)
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
old usages: c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
============= Cluster end ==============

Log: Input to synthesize the program:
Log: opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
Log: ---------------------
Log: opt.MapFrom((src, ctx) => ctx.Items[itemKey])
Log: predict is opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
Log: output  is opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
Log: ----------------------------------------------------
Log: predict is opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
Log: output  is opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
Log: ----------------------------------------------------
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is y.MapFrom(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: old usage is y.ResolveUsing(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: predict is y.MapFrom(z => { return z.StartDate <= DateTime.Now && z.EndDate > DateTime.Now && z.Payments.Count(p => p.Status == 1) > 0; })
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is map.ResolveUsing(s => s.Users ?.Count ?? 0)
Log: predict is map.MapFrom(s => s.Users ?.Count ?? 0)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is e.MapFrom((s, v) => String.IsNullOrEmpty(s.Definition))
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing((s, v) => String.IsNullOrEmpty(s.Definition))
Log: predict is e.MapFrom((s, v) => String.IsNullOrEmpty(s.Definition))
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is e.ResolveUsing(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: predict is e.MapFrom(s => s.UpdatedAt ?.ToLocalTime() ?? s.CreatedAt ?.ToLocalTime() ?? DateTime.Now)
Log: old usage is s.ResolveUsing(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: predict is s.MapFrom(u => u.UpdatedAt ?? u.CreatedAt ?? DateTime.Now)
Log: old usage is s.ResolveUsing(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: predict is s.MapFrom(n => n.UpdatedAt ?.ToLocalTime() ?? n.CreatedAt ?.ToLocalTime() ?? DateTime.MinValue)
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is null
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: predict is opt.MapFrom(x => x.Comment.Contains("Supplier", StringComparison.OrdinalIgnoreCase))
Log: old usage is opt.ResolveUsing(x => x.Type.ParseToEnum < TransactionType >())
Log: predict is opt.MapFrom(x => x.Type.ParseToEnum < TransactionType >())
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is null
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is mo.ResolveUsing(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: predict is mo.MapFrom(src => string.IsNullOrWhiteSpace(src.Id) ? Guid.NewGuid().ToString() : src.Id)
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is op.ResolveUsing(typeof(InjectImageBaseForTripResolver))
Log: predict is op.MapFrom(typeof(InjectImageBaseForTripResolver))
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: predict is opt.MapFrom(input => new ApprovedAndNotDeletedSpecif < Book >().IsSatisfiedBy(input))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToLongDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToLongDateString())
Log: old usage is opt.ResolveUsing(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: predict is opt.MapFrom(input => MapperHelper.GetContentsCount < Book, BookCatalog >(input) > 0)
Log: old usage is opt.ResolveUsing(new TitleLengthResolve(titleLimit))
Log: predict is opt.MapFrom(new TitleLengthResolve(titleLimit))
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(input => input.CreationTime.ToShortDateString())
Log: predict is opt.MapFrom(input => input.CreationTime.ToShortDateString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is opt.ResolveUsing(src => src.Password ?.ConvertToString())
Log: predict is opt.MapFrom(src => src.Password ?.ConvertToString())
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is o.ResolveUsing(e => DateTime.UtcNow - e.Started)
Log: predict is o.MapFrom(e => DateTime.UtcNow - e.Started)
Log: old usage is o.ResolveUsing(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: predict is o.MapFrom(t => t.Logos ?.Select(l => l.Name).ToArray())
Log: old usage is c.ResolveUsing(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: predict is c.MapFrom(s => JsonConvert.DeserializeObject < HistoricalTimeSelectorViewModel[] >(s.Selectors))
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is opt.ResolveUsing(ResolveCaseSummary)
Log: predict is opt.MapFrom(ResolveCaseSummary)
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is m.ResolveUsing(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: predict is m.MapFrom(r => ! string.IsNullOrWhiteSpace(r.PasswordHash))
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is null
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is ce.ResolveUsing(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: predict is ce.MapFrom(cc => { using(var sr = new StreamReader(new MemoryStream(cc.Bytes ?? Encoding.UTF8.GetBytes(string.Empty)), cc.Encoding ?? Encoding.UTF8)) { return sr.ReadToEnd(); } })
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is null
Log: old usage is c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new ValueResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new ValueResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: old usage is c.ResolveUsing(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: predict is c.MapFrom(new IgnoreNullResolver(), pm.SourceMember.Name)
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.ResolveUsing<ContextResolver, int>(src => src.Value));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.MapFrom<ContextResolver, int>(src => src.Value));
                });

============= Cluster end ==============

Log: ============== Cluster start ==============
- opt.ResolveUsing<ContextResolver, int>(src => src.Value)
----------------
+ opt.MapFrom<ContextResolver, int>(src => src.Value)

- options.ResolveUsing<DtoStatusValueResolver>()
----------------
+ options.MapFrom<DtoStatusValueResolver>()

- options.ResolveUsing<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)
----------------
+ options.MapFrom<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)

old usages: map.ResolveUsing < PriceResolver >()
old usages: map.ResolveUsing < PriceResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < FileExtensionResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ApproveResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
old usages: opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
old usages: opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < ExtendedDataResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < EntityTypeFieldResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: opt.ResolveUsing < AgeResolver >()
old usages: opt.ResolveUsing < DispositionResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: opt.ResolveUsing < DbGeographyValueResolver >()
old usages: opt.ResolveUsing < GeoLocationValueResolver >()
old usages: opt.ResolveUsing < CoordinatesValueResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
old usages: config.ResolveUsing < UpdateDateResolver >()
============= Cluster end ==============

Log: Input to synthesize the program:
Log: opt.ResolveUsing < ContextResolver, int >(src => src.Value)
Log: ---------------------
Log: opt.MapFrom < ContextResolver, int >(src => src.Value)
Log: predict is options.MapFrom < DtoStatusValueResolver >()
Log: output  is options.MapFrom < DtoStatusValueResolver >()
Log: ----------------------------------------------------
Log: predict is options.MapFrom < EnumValueResolver < Status, StatusForDto >, Status >(m => m.Status)
Log: output  is options.MapFrom < EnumValueResolver < Status, StatusForDto >, Status >(m => m.Status)
Log: ----------------------------------------------------
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom < PriceResolver >()
Log: old usage is map.ResolveUsing < PriceResolver >()
Log: predict is map.MapFrom < PriceResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: old usage is cfg.ResolveUsing < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: predict is cfg.MapFrom < ProfilePhotoUrlResolver, string >(src => src.PhotoName)
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom < FileExtensionResolver >()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom < ApproveResolver >()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom < ApproveResolver >()
Log: old usage is opt.ResolveUsing < FileExtensionResolver >()
Log: predict is opt.MapFrom < FileExtensionResolver >()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom < ApproveResolver >()
Log: old usage is opt.ResolveUsing < ApproveResolver >()
Log: predict is opt.MapFrom < ApproveResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom < WarehouseCatalogIsDefaultResolver >()
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom < OfferSettingsOfferExpiresResolver >()
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom < GatewayMethodDialogEditorViewResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom < EntityTypeFieldResolver >()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom < EntityTypeFieldResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < WarehouseCatalogIsDefaultResolver >()
Log: predict is opt.MapFrom < WarehouseCatalogIsDefaultResolver >()
Log: old usage is opt.ResolveUsing < OfferSettingsOfferExpiresResolver >()
Log: predict is opt.MapFrom < OfferSettingsOfferExpiresResolver >()
Log: old usage is opt.ResolveUsing < GatewayMethodDialogEditorViewResolver >()
Log: predict is opt.MapFrom < GatewayMethodDialogEditorViewResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < ExtendedDataResolver >()
Log: predict is opt.MapFrom < ExtendedDataResolver >()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom < EntityTypeFieldResolver >()
Log: old usage is opt.ResolveUsing < EntityTypeFieldResolver >()
Log: predict is opt.MapFrom < EntityTypeFieldResolver >()
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom < AgeResolver >()
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom < DispositionResolver >()
Log: old usage is opt.ResolveUsing < AgeResolver >()
Log: predict is opt.MapFrom < AgeResolver >()
Log: old usage is opt.ResolveUsing < DispositionResolver >()
Log: predict is opt.MapFrom < DispositionResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is opt.ResolveUsing < DbGeographyValueResolver >()
Log: predict is opt.MapFrom < DbGeographyValueResolver >()
Log: old usage is opt.ResolveUsing < GeoLocationValueResolver >()
Log: predict is opt.MapFrom < GeoLocationValueResolver >()
Log: old usage is opt.ResolveUsing < CoordinatesValueResolver >()
Log: predict is opt.MapFrom < CoordinatesValueResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: old usage is config.ResolveUsing < UpdateDateResolver >()
Log: predict is config.MapFrom < UpdateDateResolver >()
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.ResolveUsing((src, d, member, ctxt) => (int)ctxt.Items["Item"] + 5));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.MapFrom((src, d, member, ctxt) => (int)ctxt.Items["Item"] + 5));
                });

- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value1, opt => opt.ResolveUsing((source, d, dMember, context) => (int)context.Options.Items["Item"] + source.Value1));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value1, opt => opt.MapFrom((source, d, dMember, context) => (int)context.Options.Items["Item"] + source.Value1));
                });

============= Cluster end ==============

Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.ResolveUsing<DtoStatusValueResolver>()));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.MapFrom<DtoStatusValueResolver>()));

- var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.ResolveUsing<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.MapFrom<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)));

============= Cluster end ==============

total correct cases : 4 totalTestCases 4 Successful rate is 1
The successful rate for transforming old usages: 271 / 271

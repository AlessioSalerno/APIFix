Configuration: 
---- UseAdditionalOutput: True
---- UseAdditionalInput : False
---- OnlyNewUsage       : False
---- GivenExample       : 1
---- UseTypedUsage      : False
---- NewKeyWords        : 
---- OldKeyWords        : 
---- OldUsageThreashold : 0.15
---- NewUsageThreashold : 0.25
---- Validate           : True
load 16 relevant edits!
load 1000 new relevant usages
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\AutoMapper.Extensions
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\GrKouk.InfoSystem.Solution
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\ImoutoRebirth.Room
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\indievisible
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\Lykke.Service.IndexHedgingEngine
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\Lykke.Service.LiquidityEngine
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\OSharp
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\SaltyEmu
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\TopoMojo
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\tt-game
loading D:\workspace\breaking-changes\benchmark\AutoMapper\AutoMapper_7.0.0_8.0.0\clients\WifiManager
load 31 relevant client edits!
Log: invoke synthesis engine...
Log: the size of unRolledEdits is: 16
size of new usage: 1000
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: add old usage opt.ResolveUsing < GamePlatformFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: add old usage opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: add old usage opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: add old usage opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: add old usage opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: add old usage opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: add old usage opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: add old usage opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: add old usage opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing((s) => s.Permission.CanEdit())
Log: add old usage opt.ResolveUsing((s) => s.Permission.CanManage())
Log: add old usage opt.ResolveUsing(s => s.Topology.Name)
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing((s) => s.Permission.CanEdit())
Log: add old usage opt.ResolveUsing((s) => s.Permission.CanManage())
Log: add old usage opt.ResolveUsing(s => s.Topology.Name)
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing((s) => s.Permission.CanEdit())
Log: add old usage opt.ResolveUsing((s) => s.Permission.CanManage())
Log: add old usage opt.ResolveUsing(s => s.Topology.Name)
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.Gamespaces.Count)
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.Gamespaces.Count)
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing(s => s.Gamespaces.Count)
Log: add old usage opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: add old usage opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: add old usage opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: add old usage opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: add old usage opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: add old usage opt.ResolveUsing((s) => s.CanEdit())
Log: add old usage opt.ResolveUsing((s) => s.CanManage())
Log: add old usage opt.ResolveUsing((s) => s.CanEdit())
Log: add old usage opt.ResolveUsing((s) => s.CanManage())
Log: add old usage opt.ResolveUsing((s) => s.CanEdit())
Log: add old usage opt.ResolveUsing((s) => s.CanManage())
Log: add old usage opt.ResolveUsing((s) => s.CanManage())
Log: add old usage opt.ResolveUsing((s) => s.CanManage())
Log: add old usage opt.ResolveUsing((s) => s.CanManage())
Log: add old usage src.ResolveUsing(sourceMember)
Log: add old usage src.ResolveUsing(sourceMember)
Log: add old usage src.ResolveUsing(sourceMember)
Log: add old usage src.ResolveUsing(sourceMember)
Log: add old usage src.ResolveUsing(sourceMember)
Log: add old usage src.ResolveUsing(sourceMember)
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg => cfg.CreateMap<EnumTestSource, EnumTestDest>()
                    .ForMember(m => m.Prop1, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c1Called = true; return srcProp != null; });
                        o.ResolveUsing(f => f.Prop1?.Aggregate((current, next) => current | next));
                    })
                    .ForMember(m => m.Prop2, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c2Called = true; return srcProp != null; });
                        o.ResolveUsing(f => f.Prop2?.Aggregate((current, next) => current | next));
                    }));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<EnumTestSource, EnumTestDest>()
                    .ForMember(m => m.Prop1, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c1Called = true; return srcProp != null; });
                        o.MapFrom((f, _) => f.Prop1?.Aggregate((current, next) => current | next));
                    })
                    .ForMember(m => m.Prop2, o =>
                    {
                        o.Condition((_, srcProp, destProp) => { _c2Called = true; return srcProp != null; });
                        o.MapFrom((f, _) => f.Prop2?.Aggregate((current, next) => current | next));
                    }));

============= Cluster end ==============

Log: ============== Cluster start ==============
o.ResolveUsing(f => f.Prop1 ?.Aggregate((current, next) => current | next))
----------------
o.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))

old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing < GamePlatformFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesToDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesToDomainResolver >()
old usages: opt.ResolveUsing < GamePlatformToDomainResolver >()
old usages: opt.ResolveUsing < GamePlatformToDomainResolver >()
old usages: opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
old usages: opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s) => s.Permission.CanEdit())
old usages: opt.ResolveUsing((s) => s.Permission.CanManage())
old usages: opt.ResolveUsing(s => s.Topology.Name)
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.Gamespaces.Count)
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
old usages: opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
old usages: opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
old usages: opt.ResolveUsing((s) => s.CanEdit())
old usages: opt.ResolveUsing((s) => s.CanManage())
old usages: opt.ResolveUsing((s) => s.CanManage())
old usages: src.ResolveUsing(sourceMember)
old usages: src.ResolveUsing(sourceMember)
============= Cluster end ==============

Log: Input to synthesize the program:
Log: o.ResolveUsing(f => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: ---------------------
Log: o.MapFrom((f, _) => f.Prop1 ?.Aggregate((current, next) => current | next))
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is null
Log: old usage is opt.ResolveUsing < GamePlatformFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: predict is null
Log: old usage is opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is null
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is null
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is null
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is null
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.Permission.CanEdit())
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.Permission.CanManage())
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.Topology.Name)
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.Gamespaces.Count)
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.CanEdit())
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.CanManage())
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.CanManage())
Log: predict is null
Log: old usage is src.ResolveUsing(sourceMember)
Log: predict is null
Log: old usage is src.ResolveUsing(sourceMember)
Log: predict is null
Log: ============== Cluster start ==============
- var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt => opt.ResolveUsing(src =>
                {
                    var rev = src.Value + 3;
                    return rev;
                })))
                .CreateMapper();
----------------
+ var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt => opt.MapFrom((src, ctxt) =>
                {
                    var rev = src.Value + 3;
                    return rev;
                })))
                .CreateMapper();

============= Cluster end ==============

Log: ============== Cluster start ==============
opt.ResolveUsing(src => { var rev = src.Value + 3; return rev; })
----------------
opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })

old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing < GamePlatformFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesToDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesToDomainResolver >()
old usages: opt.ResolveUsing < GamePlatformToDomainResolver >()
old usages: opt.ResolveUsing < GamePlatformToDomainResolver >()
old usages: opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
old usages: opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s) => s.Permission.CanEdit())
old usages: opt.ResolveUsing((s) => s.Permission.CanManage())
old usages: opt.ResolveUsing(s => s.Topology.Name)
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.Gamespaces.Count)
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
old usages: opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
old usages: opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
old usages: opt.ResolveUsing((s) => s.CanEdit())
old usages: opt.ResolveUsing((s) => s.CanManage())
old usages: opt.ResolveUsing((s) => s.CanManage())
old usages: src.ResolveUsing(sourceMember)
old usages: src.ResolveUsing(sourceMember)
============= Cluster end ==============

Log: Input to synthesize the program:
Log: opt.ResolveUsing(src => { var rev = src.Value + 3; return rev; })
Log: ---------------------
Log: opt.MapFrom((src, ctxt) => { var rev = src.Value + 3; return rev; })
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is null
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is null
Log: old usage is opt.ResolveUsing < GamePlatformFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: predict is null
Log: old usage is opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is null
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is null
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is null
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is null
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is null
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.Permission.CanEdit())
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.Permission.CanManage())
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.Topology.Name)
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.Gamespaces.Count)
Log: predict is null
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: predict is null
Log: old usage is opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.CanEdit())
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.CanManage())
Log: predict is null
Log: old usage is opt.ResolveUsing((s) => s.CanManage())
Log: predict is null
Log: old usage is src.ResolveUsing(sourceMember)
Log: predict is null
Log: old usage is src.ResolveUsing(sourceMember)
Log: predict is null
Log: ============== Cluster start ==============
- var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt =>
                    opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
                ))
                .CreateMapper();
----------------
+ var mapper = new MapperConfiguration(
                cfg => cfg.CreateMap<Source, Dest>().ForCtorParam("thing", opt =>
                    opt.MapFrom((src, ctx) => ctx.Items[itemKey])
                ))
                .CreateMapper();

============= Cluster end ==============

Log: ============== Cluster start ==============
opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
----------------
opt.MapFrom((src, ctx) => ctx.Items[itemKey])

opt.ResolveUsing((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
----------------
opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)

opt.ResolveUsing((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
----------------
opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)

old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
old usages: opt.ResolveUsing < GamePlatformFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesToDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesToDomainResolver >()
old usages: opt.ResolveUsing < GamePlatformToDomainResolver >()
old usages: opt.ResolveUsing < GamePlatformToDomainResolver >()
old usages: opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
old usages: opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s) => s.Permission.CanEdit())
old usages: opt.ResolveUsing((s) => s.Permission.CanManage())
old usages: opt.ResolveUsing(s => s.Topology.Name)
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing(s => s.Gamespaces.Count)
old usages: opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
old usages: opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
old usages: opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
old usages: opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
old usages: opt.ResolveUsing((s) => s.CanEdit())
old usages: opt.ResolveUsing((s) => s.CanManage())
old usages: opt.ResolveUsing((s) => s.CanManage())
old usages: src.ResolveUsing(sourceMember)
old usages: src.ResolveUsing(sourceMember)
============= Cluster end ==============

Log: Input to synthesize the program:
Log: opt.ResolveUsing((src, ctx) => ctx.Items[itemKey])
Log: ---------------------
Log: opt.MapFrom((src, ctx) => ctx.Items[itemKey])
Log: predict is opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
Log: output  is opt.MapFrom((src, d, member, ctxt) =>(int) ctxt.Items["Item"] + 5)
Log: ----------------------------------------------------
Log: predict is opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
Log: output  is opt.MapFrom((source, d, dMember, context) =>(int) context.Options.Items["Item"] + source.Value1)
Log: ----------------------------------------------------
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is opt.MapFrom(src => src.AmountFpa + src.AmountNet)
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is opt.MapFrom(src => src.AmountFpa + src.AmountNet)
Log: old usage is opt.ResolveUsing(src => src.AmountFpa + src.AmountNet)
Log: predict is opt.MapFrom(src => src.AmountFpa + src.AmountNet)
Log: old usage is opt.ResolveUsing < GamePlatformFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: predict is null
Log: old usage is opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: predict is opt.MapFrom(dto => dto.FilterGroup.ToJsonString())
Log: old usage is opt.ResolveUsing(dto => dto.FilterGroup.ToJsonString())
Log: predict is opt.MapFrom(dto => dto.FilterGroup.ToJsonString())
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: predict is expr.MapFrom(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: predict is expr.MapFrom(origin => ChickenContainer.Instance.Resolve < INpcMonsterService >().GetById(origin.NpcMonsterId))
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is expr.MapFrom(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is expr.MapFrom(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is expr.MapFrom(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: old usage is expr.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is expr.MapFrom(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is expression.MapFrom(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: predict is expression.MapFrom(origin => ChickenContainer.Instance.Resolve < IItemService >().GetById(origin.ItemId))
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is expression.MapFrom(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: old usage is expression.ResolveUsing(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: predict is expression.MapFrom(origin => ChickenContainer.Instance.Resolve < ISkillService >().GetById(origin.SkillId))
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is opt.MapFrom(s => s.WhenCreated.ToString("u"))
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is opt.MapFrom(s => s.WhenCreated.ToString("u"))
Log: old usage is opt.ResolveUsing((s) => s.Permission.CanEdit())
Log: predict is opt.MapFrom((s) => s.Permission.CanEdit())
Log: old usage is opt.ResolveUsing((s) => s.Permission.CanManage())
Log: predict is opt.MapFrom((s) => s.Permission.CanManage())
Log: old usage is opt.ResolveUsing(s => s.Topology.Name)
Log: predict is opt.MapFrom(s => s.Topology.Name)
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is opt.MapFrom(s => s.WhenCreated.ToString("u"))
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is opt.MapFrom(s => s.WhenCreated.ToString("u"))
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: predict is opt.MapFrom((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: predict is opt.MapFrom((s, d, m, r) => r.GetActor().IsAdmin ||(s.Topology != null && s.Topology.Workers.Any(w => w.PersonId == r.GetActor().Id)))
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: predict is opt.MapFrom((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: predict is opt.MapFrom((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is opt.MapFrom(s => s.WhenCreated.ToString("u"))
Log: old usage is opt.ResolveUsing(s => s.Gamespaces.Count)
Log: predict is opt.MapFrom(s => s.Gamespaces.Count)
Log: old usage is opt.ResolveUsing(s => s.WhenCreated.ToString("u"))
Log: predict is opt.MapFrom(s => s.WhenCreated.ToString("u"))
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: predict is opt.MapFrom((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanEdit())))
Log: old usage is opt.ResolveUsing((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: predict is opt.MapFrom((s, d, m, r) => r.GetActor().IsAdmin ||(s.Workers.Any(w => w.PersonId == r.GetActor().Id && w.CanManage())))
Log: old usage is opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: predict is opt.MapFrom((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: old usage is opt.ResolveUsing((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: predict is opt.MapFrom((s, d, m, r) => s.Author ?? s.Workers.FirstOrDefault() ?.Person ?.Name)
Log: old usage is opt.ResolveUsing((s) => s.CanEdit())
Log: predict is opt.MapFrom((s) => s.CanEdit())
Log: old usage is opt.ResolveUsing((s) => s.CanManage())
Log: predict is opt.MapFrom((s) => s.CanManage())
Log: old usage is opt.ResolveUsing((s) => s.CanManage())
Log: predict is opt.MapFrom((s) => s.CanManage())
Log: old usage is src.ResolveUsing(sourceMember)
Log: predict is src.MapFrom(sourceMember)
Log: old usage is src.ResolveUsing(sourceMember)
Log: predict is src.MapFrom(sourceMember)
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.ResolveUsing<ContextResolver, int>(src => src.Value));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.MapFrom<ContextResolver, int>(src => src.Value));
                });

============= Cluster end ==============

Log: ============== Cluster start ==============
- opt.ResolveUsing<ContextResolver, int>(src => src.Value)
----------------
+ opt.MapFrom<ContextResolver, int>(src => src.Value)

- options.ResolveUsing<DtoStatusValueResolver>()
----------------
+ options.MapFrom<DtoStatusValueResolver>()

- options.ResolveUsing<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)
----------------
+ options.MapFrom<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)

old usages: opt.ResolveUsing < GamePlatformFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesFromDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesToDomainResolver >()
old usages: opt.ResolveUsing < UserLanguagesToDomainResolver >()
old usages: opt.ResolveUsing < GamePlatformToDomainResolver >()
old usages: opt.ResolveUsing < GamePlatformToDomainResolver >()
============= Cluster end ==============

Log: Input to synthesize the program:
Log: opt.ResolveUsing < ContextResolver, int >(src => src.Value)
Log: ---------------------
Log: opt.MapFrom < ContextResolver, int >(src => src.Value)
Log: predict is options.MapFrom < DtoStatusValueResolver >()
Log: output  is options.MapFrom < DtoStatusValueResolver >()
Log: ----------------------------------------------------
Log: predict is options.MapFrom < EnumValueResolver < Status, StatusForDto >, Status >(m => m.Status)
Log: output  is options.MapFrom < EnumValueResolver < Status, StatusForDto >, Status >(m => m.Status)
Log: ----------------------------------------------------
Log: old usage is opt.ResolveUsing < GamePlatformFromDomainResolver >()
Log: predict is opt.MapFrom < GamePlatformFromDomainResolver >()
Log: old usage is opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: predict is opt.MapFrom < UserLanguagesFromDomainResolver >()
Log: old usage is opt.ResolveUsing < UserLanguagesFromDomainResolver >()
Log: predict is opt.MapFrom < UserLanguagesFromDomainResolver >()
Log: old usage is opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: predict is opt.MapFrom < UserLanguagesToDomainResolver >()
Log: old usage is opt.ResolveUsing < UserLanguagesToDomainResolver >()
Log: predict is opt.MapFrom < UserLanguagesToDomainResolver >()
Log: old usage is opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: predict is opt.MapFrom < GamePlatformToDomainResolver >()
Log: old usage is opt.ResolveUsing < GamePlatformToDomainResolver >()
Log: predict is opt.MapFrom < GamePlatformToDomainResolver >()
Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.ResolveUsing((src, d, member, ctxt) => (int)ctxt.Items["Item"] + 5));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value, opt => opt.MapFrom((src, d, member, ctxt) => (int)ctxt.Items["Item"] + 5));
                });

- var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value1, opt => opt.ResolveUsing((source, d, dMember, context) => (int)context.Options.Items["Item"] + source.Value1));
                });
----------------
+ var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<Source, Dest>()
                        .ForMember(d => d.Value1, opt => opt.MapFrom((source, d, dMember, context) => (int)context.Options.Items["Item"] + source.Value1));
                });

============= Cluster end ==============

Log: ============== Cluster start ==============
- var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.ResolveUsing<DtoStatusValueResolver>()));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.MapFrom<DtoStatusValueResolver>()));

- var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.ResolveUsing<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)));
----------------
+ var config = new MapperConfiguration(cfg => cfg.CreateMap<Order, OrderDtoWithOwnStatus>()
                .ForMember(dto => dto.Status, options => options.MapFrom<EnumValueResolver<Status, StatusForDto>, Status>(m => m.Status)));

============= Cluster end ==============

total correct cases : 4 totalTestCases 4 Successful rate is 1
The successful rate for transforming old usages: 31 / 31

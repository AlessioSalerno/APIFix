Configuration: 
---- UseAdditionalOutput: False
---- UseAdditionalInput : True
---- OnlyNewUsage       : False
---- GivenExample       : 1
---- UseTypedUsage      : True
---- NewKeyWords        : 
---- OldKeyWords        : 
---- OldUsageThreashold : 0.2
---- NewUsageThreashold : 0.25
load 3 relevant edits!
load 82 old relevant usages
Log: invoke synthesis engine...
Log: the size of unRolledEdits is: 3
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage Handle(notification)
Log: add old usage TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
Log: add old usage TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
Log: add old usage TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: add old usage TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: add old usage TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
Log: add old usage TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
Log: add old usage TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
Log: add old usage TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: add old usage TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
Log: add old usage TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
Log: add old usage TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
Log: add old usage TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
Log: add old usage TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: add old usage TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
Log: ============== Cluster start ==============
- var handlers = serviceFactory
                .GetInstances<INotificationHandler<TNotification>>()
                .Select(x => x.Handle((TNotification)notification, cancellationToken));
----------------
+ var handlers = serviceFactory
                .GetInstances<INotificationHandler<TNotification>>()
                .Select(x => new Func<Task>(() => x.Handle((TNotification)notification, cancellationToken)));

============= Cluster end ==============

Log: ============== Cluster start ==============
- await Handle(request).ConfigureAwait(false);
----------------
+ await Handle(request, cancellationToken).ConfigureAwait(false);

============= Cluster end ==============

Log: ============== Cluster start ==============
Handle(request)
----------------
Handle(request, cancellationToken)

old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: Handle(notification)
old usages: TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
old usages: TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
old usages: TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
old usages: TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
old usages: TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
old usages: TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
old usages: TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
old usages: TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
old usages: TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
old usages: TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
old usages: TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
old usages: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
old usages: TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
old usages: TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
============= Cluster end ==============

Old usage: Handle(notification)
Log: Subsititution: request:Argument -> notification:Argument
Correponding output: Handle(notification, cancellationToken)
Old usage: TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
Log: Subsititution: request:Argument -> new AddMessageRequest { Text = "Hello", UserId = user.Id }:Argument
Log: Subsititution: Handle:IdentifierName -> TestSubject.Handle:SimpleMemberAccessExpression
Correponding output: TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id }, cancellationToken)
Old usage: TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
Log: Subsititution: request:Argument -> new GetMessagesRequest { WishListId = firstWishList.Id }:Argument
Log: Subsititution: Handle:IdentifierName -> TestSubject.Handle:SimpleMemberAccessExpression
Correponding output: TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id }, cancellationToken)
Old usage: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
Log: Subsititution: request:Argument -> new AcceptInvitationRequest(token) { UserId = user.Id }:Argument
Log: Subsititution: Handle:IdentifierName -> TestSubject.Handle:SimpleMemberAccessExpression
Correponding output: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id }, cancellationToken)
Old usage: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
Log: Subsititution: request:Argument -> new AcceptInvitationRequest(token) { UserId = otherUser.Id }:Argument
Log: Subsititution: Handle:IdentifierName -> TestSubject.Handle:SimpleMemberAccessExpression
Correponding output: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id }, cancellationToken)
Old usage: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
Log: Subsititution: request:Argument -> new AcceptInvitationRequest(token) { UserId = bob.Id }:Argument
Log: Subsititution: Handle:IdentifierName -> TestSubject.Handle:SimpleMemberAccessExpression
Correponding output: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id }, cancellationToken)
Old usage: TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: Subsititution: request:Argument -> new GetMyListRequest { UserId = user.Id }:Argument
Log: Subsititution: Handle:IdentifierName -> TestSubject.Handle:SimpleMemberAccessExpression
Correponding output: TestSubject.Handle(new GetMyListRequest { UserId = user.Id }, cancellationToken)
Old usage: TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
Log: Subsititution: request:Argument -> new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id }:Argument
Log: Subsititution: Handle:IdentifierName -> TestSubject.Handle:SimpleMemberAccessExpression
Correponding output: TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id }, cancellationToken)
Log: Input to synthesize the program:
Log: Handle(request)
Log: ---------------------
Log: Handle(request, cancellationToken)
Log: Handle(notification)
Log: ---------------------
Log: Handle(notification, cancellationToken)
Log: TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
Log: ---------------------
Log: TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id }, cancellationToken)
Log: TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
Log: ---------------------
Log: TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id }, cancellationToken)
Log: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
Log: ---------------------
Log: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id }, cancellationToken)
Log: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
Log: ---------------------
Log: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id }, cancellationToken)
Log: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
Log: ---------------------
Log: TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id }, cancellationToken)
Log: TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: ---------------------
Log: TestSubject.Handle(new GetMyListRequest { UserId = user.Id }, cancellationToken)
Log: TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
Log: ---------------------
Log: TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id }, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is Handle(notification)
Log: predict is Handle(notification, cancellationToken)
Log: old usage is TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
Log: predict is TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
Log: predict is TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: predict is TestSubject.Handle(new GetMyListRequest { UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: predict is TestSubject.Handle(new GetMyListRequest { UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
Log: predict is TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
Log: predict is TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
Log: predict is TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: predict is TestSubject.Handle(new GetMyListRequest { UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
Log: predict is TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id })
Log: predict is TestSubject.Handle(new AddMessageRequest { Text = "Hello", UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id })
Log: predict is TestSubject.Handle(new GetMessagesRequest { WishListId = firstWishList.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = otherUser.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id })
Log: predict is TestSubject.Handle(new AcceptInvitationRequest(token) { UserId = bob.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetMyListRequest { UserId = user.Id })
Log: predict is TestSubject.Handle(new GetMyListRequest { UserId = user.Id }, cancellationToken)
Log: old usage is TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id })
Log: predict is TestSubject.Handle(new GetSharedListRequest { WishListId = bob.WishList.Id, UserId = james.Id }, cancellationToken)
total correct cases : 0 totalTestCases 0 Successful rate is 0
The successful rate for transforming old usages: 56 / 56

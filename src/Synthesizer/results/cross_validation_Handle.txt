Configuration: 
---- UseAdditionalOutput: True
---- UseAdditionalInput : False
---- OnlyNewUsage       : False
---- GivenExample       : 1
---- UseTypedUsage      : False
---- NewKeyWords        : 
---- OldKeyWords        : 
---- OldUsageThreashold : 0.2
---- NewUsageThreashold : 0.25
---- Validate           : True
load 3 relevant edits!
load 1000 new relevant usages
loading D:\workspace\breaking-changes\benchmark\MediatR\MediatR_5.0.1_6.0.0\clients\tt-game
load 8 relevant client edits!
Log: invoke synthesis engine...
Log: the size of unRolledEdits is: 3
size of new usage: 1000
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage Handle(notification.CallbackQuery, cancellationToken)
Log: add new usage Handle(notification.CallbackQuery, cancellationToken)
Log: add new usage instructor.Handle(message, courses)
Log: add new usage articleCreateHandler.Handle(command, new System.Threading.CancellationToken())
Log: add new usage articleEditHandler.Handle(command, new System.Threading.CancellationToken())
Log: add new usage articleDeleteHandler.Handle(deleteCmd, new System.Threading.CancellationToken())
Log: add new usage articleDeleteHandler.Handle(deleteCmd, new System.Threading.CancellationToken())
Log: add new usage articleDeleteHandler.Handle(deleteCmd, new System.Threading.CancellationToken())
Log: add new usage commentCreateHandler.Handle(command, new System.Threading.CancellationToken())
Log: add new usage handler.Handle(c, CancellationToken.None)
Log: add new usage applier.Handle(ev, CancellationToken.None)
Log: add new usage handler.Handle(request, cancellationToken)
Log: add new usage handler.Handle(request, cancellationToken)
Log: add new usage entity.Handle(new CreateExampleAggregate(guid) { Name = "OneName", Number = 100, Date = new DateTime(1990, 5, 12) }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage handler.Handle(c, CancellationToken.None)
Log: add new usage applier.Handle(ev, CancellationToken.None)
Log: add new usage handler.Handle(request, cancellationToken)
Log: add new usage handler.Handle(request, cancellationToken)
Log: add new usage entity.Handle(new CreateExampleAggregate(guid) { Name = "OneName", Number = 100, Date = new DateTime(1990, 5, 12) }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage handler.Handle(c, CancellationToken.None)
Log: add new usage applier.Handle(ev, CancellationToken.None)
Log: add new usage handler.Handle(request, cancellationToken)
Log: add new usage handler.Handle(request, cancellationToken)
Log: add new usage entity.Handle(new CreateExampleAggregate(guid) { Name = "OneName", Number = 100, Date = new DateTime(1990, 5, 12) }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLinkArrowsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLinkArrowsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeAutosuggestQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeAutosuggestQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLinkArrowsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLinkArrowsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeAutosuggestQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeAutosuggestQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLinkArrowsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLinkArrowsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new CardImageByNameQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeAutosuggestQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeAutosuggestQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeImageByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(query, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage _sut.Handle(command, CancellationToken.None)
Log: add new usage handler.Handle(new Domain.Asset.Commands.AddMinimalAsset { StageId = stageId, }, CancellationToken.None)
Log: add new usage personHandler.Handle(addPerson, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(entity, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage handler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage handler.Handle(query, CancellationToken.None)
Log: add new usage handler.Handle(new Domain.Asset.Commands.AddMinimalAsset { StageId = stageId, }, CancellationToken.None)
Log: add new usage personHandler.Handle(addPerson, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(entity, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage handler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage handler.Handle(query, CancellationToken.None)
Log: add new usage handler.Handle(new Domain.Asset.Commands.AddMinimalAsset { StageId = stageId, }, CancellationToken.None)
Log: add new usage personHandler.Handle(addPerson, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(entity, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage handler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage queryHandler.Handle(query, CancellationToken.None)
Log: add new usage handler.Handle(query, CancellationToken.None)
Log: add new usage getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getIncompleteShipmentsHandler.Handle(new GetIncompleteShipments.Request { }, default(CancellationToken))
Log: add new usage upsertCustomerHandler.Handle(new UpsertCustomer.Request { Customer = customer, AcceptedTermsAndConditions = true }, default(CancellationToken))
Log: add new usage authenticateHandler.Handle(new Authenticate.Request { Username = "foo", Password = "bar" }, default(CancellationToken))
Log: add new usage getProductsHandler.Handle(new GetProducts.Request { }, default(CancellationToken))
Log: add new usage processBookingPaymentHandler.Handle(new CheckoutBooking.Request { BookingId = booking.BookingId, Number = "", Cvc = "", ExpYear = 09, ExpMonth = 22, }, default(CancellationToken))
Log: add new usage upsertBookingHandler.Handle(request, default(CancellationToken))
Log: add new usage getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getTaxesHandler.Handle(new GetTaxes.Request { }, default(CancellationToken))
Log: add new usage addStockHandler.Handle(new AddStock.Request { ProductId = product.ProductId, Quantity = 1 }, default(CancellationToken))
Log: add new usage getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getIncompleteShipmentsHandler.Handle(new GetIncompleteShipments.Request { }, default(CancellationToken))
Log: add new usage upsertCustomerHandler.Handle(new UpsertCustomer.Request { Customer = customer, AcceptedTermsAndConditions = true }, default(CancellationToken))
Log: add new usage authenticateHandler.Handle(new Authenticate.Request { Username = "foo", Password = "bar" }, default(CancellationToken))
Log: add new usage getProductsHandler.Handle(new GetProducts.Request { }, default(CancellationToken))
Log: add new usage processBookingPaymentHandler.Handle(new CheckoutBooking.Request { BookingId = booking.BookingId, Number = "", Cvc = "", ExpYear = 09, ExpMonth = 22, }, default(CancellationToken))
Log: add new usage upsertBookingHandler.Handle(request, default(CancellationToken))
Log: add new usage getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getTaxesHandler.Handle(new GetTaxes.Request { }, default(CancellationToken))
Log: add new usage addStockHandler.Handle(new AddStock.Request { ProductId = product.ProductId, Quantity = 1 }, default(CancellationToken))
Log: add new usage getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getIncompleteShipmentsHandler.Handle(new GetIncompleteShipments.Request { }, default(CancellationToken))
Log: add new usage upsertCustomerHandler.Handle(new UpsertCustomer.Request { Customer = customer, AcceptedTermsAndConditions = true }, default(CancellationToken))
Log: add new usage authenticateHandler.Handle(new Authenticate.Request { Username = "foo", Password = "bar" }, default(CancellationToken))
Log: add new usage getProductsHandler.Handle(new GetProducts.Request { }, default(CancellationToken))
Log: add new usage processBookingPaymentHandler.Handle(new CheckoutBooking.Request { BookingId = booking.BookingId, Number = "", Cvc = "", ExpYear = 09, ExpMonth = 22, }, default(CancellationToken))
Log: add new usage upsertBookingHandler.Handle(request, default(CancellationToken))
Log: add new usage getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: add new usage getTaxesHandler.Handle(new GetTaxes.Request { }, default(CancellationToken))
Log: add new usage addStockHandler.Handle(new AddStock.Request { ProductId = product.ProductId, Quantity = 1 }, default(CancellationToken))
Log: add new usage handler.Handle(documentMessage, _serviceFactory)
Log: add new usage handler.Handle(documentMessage, _serviceFactory)
Log: add new usage handler.Handle(documentMessage, _serviceFactory)
Log: add new usage _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef }, new CancellationToken())
Log: add new usage _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef }, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _sut.Handle(_command, new CancellationToken())
Log: add new usage _sut.Handle(_command, new CancellationToken())
Log: add new usage _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 }, new CancellationToken())
Log: add new usage _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 }, new CancellationToken())
Log: add new usage _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 }, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(_request, new CancellationToken())
Log: add new usage _handler.Handle(_request, new CancellationToken())
Log: add new usage requestHandler.Handle(query, new CancellationToken())
Log: add new usage requestHandler.Handle(query, new CancellationToken())
Log: add new usage _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = false, EffectiveDate = null }, new CancellationToken())
Log: add new usage _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = null }, new CancellationToken())
Log: add new usage _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = new DateTime(2016, 06, 01) }, new CancellationToken())
Log: add new usage _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = null }, new CancellationToken())
Log: add new usage _handler.Handle(query, new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(query, new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _sut.Handle(_command, new CancellationToken())
Log: add new usage _sut.Handle(_command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validCommand), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validCommand), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validCommand), new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _sut.Handle(command, new CancellationToken())
Log: add new usage _sut.Handle(command, new CancellationToken())
Log: add new usage _sut.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(_exampleValidCommand, new CancellationToken())
Log: add new usage _handler.Handle(_exampleValidCommand, new CancellationToken())
Log: add new usage _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef }, new CancellationToken())
Log: add new usage _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef }, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _sut.Handle(_command, new CancellationToken())
Log: add new usage _sut.Handle(_command, new CancellationToken())
Log: add new usage _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 }, new CancellationToken())
Log: add new usage _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 }, new CancellationToken())
Log: add new usage _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 }, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add new usage _handler.Handle(_request, new CancellationToken())
Log: add new usage _handler.Handle(_request, new CancellationToken())
Log: add new usage requestHandler.Handle(query, new CancellationToken())
Log: add new usage requestHandler.Handle(query, new CancellationToken())
Log: add new usage _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = false, EffectiveDate = null }, new CancellationToken())
Log: add new usage _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = null }, new CancellationToken())
Log: add new usage _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = new DateTime(2016, 06, 01) }, new CancellationToken())
Log: add new usage _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = null }, new CancellationToken())
Log: add new usage _handler.Handle(query, new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(query, new CancellationToken())
Log: add new usage _handler.Handle(request, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _sut.Handle(_command, new CancellationToken())
Log: add new usage _sut.Handle(_command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validCommand), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validCommand), new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validCommand), new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _handler.Handle(_validCommand, new CancellationToken())
Log: add new usage _sut.Handle(command, new CancellationToken())
Log: add new usage _sut.Handle(command, new CancellationToken())
Log: add new usage _sut.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(_exampleValidCommand, new CancellationToken())
Log: add new usage _handler.Handle(_exampleValidCommand, new CancellationToken())
Log: add new usage _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef }, new CancellationToken())
Log: add new usage _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef }, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(command, new CancellationToken())
Log: add new usage _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: add old usage handler.Handle(resetSecurityStamp)
Log: add old usage handler.Handle(resetSecurityStamp)
Log: add old usage var result = await requestHandler.Handle(request);
Log: add old usage requestHandler.Handle(request)
Log: add old usage requestHandler.Handle(request)
Log: add old usage handler.Handle(sentRequest)
Log: add old usage handler.Handle(sentRequest)
Log: ============== Cluster start ==============
- var handlers = serviceFactory
                .GetInstances<INotificationHandler<TNotification>>()
                .Select(x => x.Handle((TNotification)notification, cancellationToken));
----------------
+ var handlers = serviceFactory
                .GetInstances<INotificationHandler<TNotification>>()
                .Select(x => new Func<Task>(() => x.Handle((TNotification)notification, cancellationToken)));

old usages: var result = await requestHandler.Handle(request);
============= Cluster end ==============

Log: Input to synthesize the program:
Log: var handlers = serviceFactory.GetInstances < INotificationHandler < TNotification > >().Select(x => x.Handle((TNotification) notification, cancellationToken));
Log: ---------------------
Log: var handlers = serviceFactory.GetInstances < INotificationHandler < TNotification > >().Select(x => new Func < Task >(() => x.Handle((TNotification) notification, cancellationToken)));
Log: old usage is var result = await requestHandler.Handle(request);
Log: predict is null
Log: ============== Cluster start ==============
- await Handle(request).ConfigureAwait(false);
----------------
+ await Handle(request, cancellationToken).ConfigureAwait(false);

============= Cluster end ==============

Log: ============== Cluster start ==============
Handle(request)
----------------
Handle(request, cancellationToken)

new usages: _sut.Handle(command, CancellationToken.None)
new usages: _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
new usages: _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
new usages: _sut.Handle(query, CancellationToken.None)
new usages: _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
new usages: _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
new usages: _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
new usages: _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
new usages: _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
new usages: _sut.Handle(new AllTypesQuery(), CancellationToken.None)
new usages: _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
new usages: _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
new usages: _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
new usages: _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
new usages: Handle(notification.CallbackQuery, cancellationToken)
new usages: instructor.Handle(message, courses)
new usages: articleCreateHandler.Handle(command, new System.Threading.CancellationToken())
new usages: articleEditHandler.Handle(command, new System.Threading.CancellationToken())
new usages: articleDeleteHandler.Handle(deleteCmd, new System.Threading.CancellationToken())
new usages: commentCreateHandler.Handle(command, new System.Threading.CancellationToken())
new usages: handler.Handle(c, CancellationToken.None)
new usages: applier.Handle(ev, CancellationToken.None)
new usages: handler.Handle(request, cancellationToken)
new usages: entity.Handle(new CreateExampleAggregate(guid) { Name = "OneName", Number = 100, Date = new DateTime(1990, 5, 12) }, CancellationToken.None)
new usages: exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
new usages: exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
new usages: _sut.Handle(new AllLinkArrowsQuery(), CancellationToken.None)
new usages: _sut.Handle(new CardImageByNameQuery(), CancellationToken.None)
new usages: _sut.Handle(new ArchetypeAutosuggestQuery(), CancellationToken.None)
new usages: _sut.Handle(new ArchetypeImageByIdQuery(), CancellationToken.None)
new usages: _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
new usages: _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
new usages: handler.Handle(new Domain.Asset.Commands.AddMinimalAsset { StageId = stageId, }, CancellationToken.None)
new usages: personHandler.Handle(addPerson, CancellationToken.None)
new usages: queryHandler.Handle(query, CancellationToken.None)
new usages: queryHandler.Handle(entity, CancellationToken.None)
new usages: handler.Handle(query, CancellationToken.None)
new usages: getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username }, default(CancellationToken))
new usages: getIncompleteShipmentsHandler.Handle(new GetIncompleteShipments.Request { }, default(CancellationToken))
new usages: upsertCustomerHandler.Handle(new UpsertCustomer.Request { Customer = customer, AcceptedTermsAndConditions = true }, default(CancellationToken))
new usages: authenticateHandler.Handle(new Authenticate.Request { Username = "foo", Password = "bar" }, default(CancellationToken))
new usages: getProductsHandler.Handle(new GetProducts.Request { }, default(CancellationToken))
new usages: processBookingPaymentHandler.Handle(new CheckoutBooking.Request { BookingId = booking.BookingId, Number = "", Cvc = "", ExpYear = 09, ExpMonth = 22, }, default(CancellationToken))
new usages: upsertBookingHandler.Handle(request, default(CancellationToken))
new usages: getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username }, default(CancellationToken))
new usages: getTaxesHandler.Handle(new GetTaxes.Request { }, default(CancellationToken))
new usages: addStockHandler.Handle(new AddStock.Request { ProductId = product.ProductId, Quantity = 1 }, default(CancellationToken))
new usages: handler.Handle(documentMessage, _serviceFactory)
new usages: _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef }, new CancellationToken())
new usages: _handler.Handle(command, new CancellationToken())
new usages: _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
new usages: _sut.Handle(_command, new CancellationToken())
new usages: _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 }, new CancellationToken())
new usages: _handler.Handle(request, new CancellationToken())
new usages: _handler.Handle(_request, new CancellationToken())
new usages: requestHandler.Handle(query, new CancellationToken())
new usages: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = false, EffectiveDate = null }, new CancellationToken())
new usages: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = null }, new CancellationToken())
new usages: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = new DateTime(2016, 06, 01) }, new CancellationToken())
new usages: _handler.Handle(query, new CancellationToken())
new usages: _handler.Handle(_validCommand, new CancellationToken())
new usages: _handler.Handle(TestHelper.Clone(_validCommand), new CancellationToken())
new usages: _sut.Handle(command, new CancellationToken())
new usages: _handler.Handle(_exampleValidCommand, new CancellationToken())
old usages: handler.Handle(resetSecurityStamp)
old usages: handler.Handle(resetSecurityStamp)
old usages: requestHandler.Handle(request)
old usages: requestHandler.Handle(request)
old usages: handler.Handle(sentRequest)
old usages: handler.Handle(sentRequest)
============= Cluster end ==============

Log: generalized output is: Handle(request, cancellationToken)
Interesting new usage: _sut.Handle(command, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> command:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(command)
Interesting new usage: _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new ArchetypeByIdQuery { ArchetypeId = archetypeId }:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId })
Interesting new usage: _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new CardByNameQuery { Name = cardName }:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new CardByNameQuery { Name = cardName })
Interesting new usage: _sut.Handle(query, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> query:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(query)
Interesting new usage: _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new AllCategoriesQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new AllCategoriesQuery())
Interesting new usage: _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new LatestBanlistQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new LatestBanlistQuery())
Interesting new usage: _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new AllLimitsQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new AllLimitsQuery())
Interesting new usage: _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new AllFormatsQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new AllFormatsQuery())
Interesting new usage: _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new AllAttributesQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new AllAttributesQuery())
Interesting new usage: _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new AllTypesQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new AllTypesQuery())
Interesting new usage: _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new ArchetypeImageByIdQuery { ArchetypeId = archetypeId }:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new ArchetypeImageByIdQuery { ArchetypeId = archetypeId })
Interesting new usage: _sut.Handle(new AllSubCategoriesQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new AllSubCategoriesQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new AllSubCategoriesQuery())
Interesting new usage: _sut.Handle(new CardImageByNameQuery { Name = cardName }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new CardImageByNameQuery { Name = cardName }:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new CardImageByNameQuery { Name = cardName })
Interesting new usage: _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new DeckThumbnailImagePathQuery { DeckId = deckId }:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new DeckThumbnailImagePathQuery { DeckId = deckId })
Interesting new usage: Handle(notification.CallbackQuery, cancellationToken)
Log: Subsititution: request:Argument -> notification.CallbackQuery:Argument
Correponding input: Handle(notification.CallbackQuery)
Interesting new usage: instructor.Handle(message, courses)
Log: Subsititution: cancellationToken:IdentifierToken -> courses:IdentifierToken
Log: Subsititution: request:Argument -> message:Argument
Log: Subsititution: Handle:IdentifierName -> instructor.Handle:SimpleMemberAccessExpression
Correponding input: instructor.Handle(message)
Interesting new usage: articleCreateHandler.Handle(command, new System.Threading.CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new System.Threading.CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> command:Argument
Log: Subsititution: Handle:IdentifierName -> articleCreateHandler.Handle:SimpleMemberAccessExpression
Correponding input: articleCreateHandler.Handle(command)
Interesting new usage: articleEditHandler.Handle(command, new System.Threading.CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new System.Threading.CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> command:Argument
Log: Subsititution: Handle:IdentifierName -> articleEditHandler.Handle:SimpleMemberAccessExpression
Correponding input: articleEditHandler.Handle(command)
Interesting new usage: articleDeleteHandler.Handle(deleteCmd, new System.Threading.CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new System.Threading.CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> deleteCmd:Argument
Log: Subsititution: Handle:IdentifierName -> articleDeleteHandler.Handle:SimpleMemberAccessExpression
Correponding input: articleDeleteHandler.Handle(deleteCmd)
Interesting new usage: commentCreateHandler.Handle(command, new System.Threading.CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new System.Threading.CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> command:Argument
Log: Subsititution: Handle:IdentifierName -> commentCreateHandler.Handle:SimpleMemberAccessExpression
Correponding input: commentCreateHandler.Handle(command)
Interesting new usage: handler.Handle(c, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> c:Argument
Log: Subsititution: Handle:IdentifierName -> handler.Handle:SimpleMemberAccessExpression
Correponding input: handler.Handle(c)
Interesting new usage: applier.Handle(ev, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> ev:Argument
Log: Subsititution: Handle:IdentifierName -> applier.Handle:SimpleMemberAccessExpression
Correponding input: applier.Handle(ev)
Interesting new usage: handler.Handle(request, cancellationToken)
Log: Subsititution: request:Argument -> request:Argument
Log: Subsititution: Handle:IdentifierName -> handler.Handle:SimpleMemberAccessExpression
Correponding input: handler.Handle(request)
Interesting new usage: entity.Handle(new CreateExampleAggregate(guid) { Name = "OneName", Number = 100, Date = new DateTime(1990, 5, 12) }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new CreateExampleAggregate(guid) { Name = "OneName", Number = 100, Date = new DateTime(1990, 5, 12) }:Argument
Log: Subsititution: Handle:IdentifierName -> entity.Handle:SimpleMemberAccessExpression
Correponding input: entity.Handle(new CreateExampleAggregate(guid) { Name = "OneName", Number = 100, Date = new DateTime(1990, 5, 12) })
Interesting new usage: exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now }:Argument
Log: Subsititution: Handle:IdentifierName -> exampleAggregate1.Handle:SimpleMemberAccessExpression
Correponding input: exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id) { Name = "This Entity Handled one Event", Date = DateTime.Now })
Interesting new usage: exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now }:Argument
Log: Subsititution: Handle:IdentifierName -> exampleAggregate1.Handle:SimpleMemberAccessExpression
Correponding input: exampleAggregate1.Handle(new ExampleAggregateCreated(eventid, id1) { Name = "This Entity Handled one Event", Date = DateTime.Now })
Interesting new usage: _sut.Handle(new AllLinkArrowsQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new AllLinkArrowsQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new AllLinkArrowsQuery())
Interesting new usage: _sut.Handle(new CardImageByNameQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new CardImageByNameQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new CardImageByNameQuery())
Interesting new usage: _sut.Handle(new ArchetypeAutosuggestQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new ArchetypeAutosuggestQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new ArchetypeAutosuggestQuery())
Interesting new usage: _sut.Handle(new ArchetypeImageByIdQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new ArchetypeImageByIdQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new ArchetypeImageByIdQuery())
Interesting new usage: _sut.Handle(new BanlistByIdQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new BanlistByIdQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new BanlistByIdQuery())
Interesting new usage: _sut.Handle(new ArchetypeByIdQuery(), CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new ArchetypeByIdQuery():Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new ArchetypeByIdQuery())
Interesting new usage: handler.Handle(new Domain.Asset.Commands.AddMinimalAsset { StageId = stageId, }, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> new Domain.Asset.Commands.AddMinimalAsset { StageId = stageId, }:Argument
Log: Subsititution: Handle:IdentifierName -> handler.Handle:SimpleMemberAccessExpression
Correponding input: handler.Handle(new Domain.Asset.Commands.AddMinimalAsset { StageId = stageId, })
Interesting new usage: personHandler.Handle(addPerson, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> addPerson:Argument
Log: Subsititution: Handle:IdentifierName -> personHandler.Handle:SimpleMemberAccessExpression
Correponding input: personHandler.Handle(addPerson)
Interesting new usage: queryHandler.Handle(query, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> query:Argument
Log: Subsititution: Handle:IdentifierName -> queryHandler.Handle:SimpleMemberAccessExpression
Correponding input: queryHandler.Handle(query)
Interesting new usage: queryHandler.Handle(entity, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> entity:Argument
Log: Subsititution: Handle:IdentifierName -> queryHandler.Handle:SimpleMemberAccessExpression
Correponding input: queryHandler.Handle(entity)
Interesting new usage: handler.Handle(query, CancellationToken.None)
Log: Subsititution: cancellationToken:IdentifierName -> CancellationToken.None:SimpleMemberAccessExpression
Log: Subsititution: request:Argument -> query:Argument
Log: Subsititution: Handle:IdentifierName -> handler.Handle:SimpleMemberAccessExpression
Correponding input: handler.Handle(query)
Interesting new usage: getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new GetCommittedShipments.Request { CurrentUsername = user.Username }:Argument
Log: Subsititution: Handle:IdentifierName -> getCommittedShipmentsHandler.Handle:SimpleMemberAccessExpression
Correponding input: getCommittedShipmentsHandler.Handle(new GetCommittedShipments.Request { CurrentUsername = user.Username })
Interesting new usage: getIncompleteShipmentsHandler.Handle(new GetIncompleteShipments.Request { }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new GetIncompleteShipments.Request { }:Argument
Log: Subsititution: Handle:IdentifierName -> getIncompleteShipmentsHandler.Handle:SimpleMemberAccessExpression
Correponding input: getIncompleteShipmentsHandler.Handle(new GetIncompleteShipments.Request { })
Interesting new usage: upsertCustomerHandler.Handle(new UpsertCustomer.Request { Customer = customer, AcceptedTermsAndConditions = true }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new UpsertCustomer.Request { Customer = customer, AcceptedTermsAndConditions = true }:Argument
Log: Subsititution: Handle:IdentifierName -> upsertCustomerHandler.Handle:SimpleMemberAccessExpression
Correponding input: upsertCustomerHandler.Handle(new UpsertCustomer.Request { Customer = customer, AcceptedTermsAndConditions = true })
Interesting new usage: authenticateHandler.Handle(new Authenticate.Request { Username = "foo", Password = "bar" }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new Authenticate.Request { Username = "foo", Password = "bar" }:Argument
Log: Subsititution: Handle:IdentifierName -> authenticateHandler.Handle:SimpleMemberAccessExpression
Correponding input: authenticateHandler.Handle(new Authenticate.Request { Username = "foo", Password = "bar" })
Interesting new usage: getProductsHandler.Handle(new GetProducts.Request { }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new GetProducts.Request { }:Argument
Log: Subsititution: Handle:IdentifierName -> getProductsHandler.Handle:SimpleMemberAccessExpression
Correponding input: getProductsHandler.Handle(new GetProducts.Request { })
Interesting new usage: processBookingPaymentHandler.Handle(new CheckoutBooking.Request { BookingId = booking.BookingId, Number = "", Cvc = "", ExpYear = 09, ExpMonth = 22, }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new CheckoutBooking.Request { BookingId = booking.BookingId, Number = "", Cvc = "", ExpYear = 09, ExpMonth = 22, }:Argument
Log: Subsititution: Handle:IdentifierName -> processBookingPaymentHandler.Handle:SimpleMemberAccessExpression
Correponding input: processBookingPaymentHandler.Handle(new CheckoutBooking.Request { BookingId = booking.BookingId, Number = "", Cvc = "", ExpYear = 09, ExpMonth = 22, })
Interesting new usage: upsertBookingHandler.Handle(request, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> request:Argument
Log: Subsititution: Handle:IdentifierName -> upsertBookingHandler.Handle:SimpleMemberAccessExpression
Correponding input: upsertBookingHandler.Handle(request)
Interesting new usage: getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new GetMyBookings.Request { CurrentUsername = user.Username }:Argument
Log: Subsititution: Handle:IdentifierName -> getMyBookingsHandler.Handle:SimpleMemberAccessExpression
Correponding input: getMyBookingsHandler.Handle(new GetMyBookings.Request { CurrentUsername = user.Username })
Interesting new usage: getTaxesHandler.Handle(new GetTaxes.Request { }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new GetTaxes.Request { }:Argument
Log: Subsititution: Handle:IdentifierName -> getTaxesHandler.Handle:SimpleMemberAccessExpression
Correponding input: getTaxesHandler.Handle(new GetTaxes.Request { })
Interesting new usage: addStockHandler.Handle(new AddStock.Request { ProductId = product.ProductId, Quantity = 1 }, default(CancellationToken))
Log: Subsititution: cancellationToken:IdentifierName -> default(CancellationToken):DefaultExpression
Log: Subsititution: request:Argument -> new AddStock.Request { ProductId = product.ProductId, Quantity = 1 }:Argument
Log: Subsititution: Handle:IdentifierName -> addStockHandler.Handle:SimpleMemberAccessExpression
Correponding input: addStockHandler.Handle(new AddStock.Request { ProductId = product.ProductId, Quantity = 1 })
Interesting new usage: handler.Handle(documentMessage, _serviceFactory)
Log: Subsititution: cancellationToken:IdentifierToken -> _serviceFactory:IdentifierToken
Log: Subsititution: request:Argument -> documentMessage:Argument
Log: Subsititution: Handle:IdentifierName -> handler.Handle:SimpleMemberAccessExpression
Correponding input: handler.Handle(documentMessage)
Interesting new usage: _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef }, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> new GetUserNotificationSettingsQuery { UserRef = UserRef }:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(new GetUserNotificationSettingsQuery { UserRef = UserRef })
Interesting new usage: _handler.Handle(command, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> command:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(command)
Interesting new usage: _handler.Handle(TestHelper.Clone(_validRequest), new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> TestHelper.Clone(_validRequest):Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(TestHelper.Clone(_validRequest))
Interesting new usage: _sut.Handle(_command, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> _command:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(_command)
Interesting new usage: _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 }, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> new GetProviderAgreementQueryRequest { ProviderId = 1234567 }:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(new GetProviderAgreementQueryRequest { ProviderId = 1234567 })
Interesting new usage: _handler.Handle(request, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> request:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(request)
Interesting new usage: _handler.Handle(_request, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> _request:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(_request)
Interesting new usage: requestHandler.Handle(query, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> query:Argument
Log: Subsititution: Handle:IdentifierName -> requestHandler.Handle:SimpleMemberAccessExpression
Correponding input: requestHandler.Handle(query)
Interesting new usage: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = false, EffectiveDate = null }, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> new GetTrainingProgrammesQueryRequest { IncludeFrameworks = false, EffectiveDate = null }:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = false, EffectiveDate = null })
Interesting new usage: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = null }, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = null }:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = null })
Interesting new usage: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = new DateTime(2016, 06, 01) }, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = new DateTime(2016, 06, 01) }:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(new GetTrainingProgrammesQueryRequest { IncludeFrameworks = true, EffectiveDate = new DateTime(2016, 06, 01) })
Interesting new usage: _handler.Handle(query, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> query:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(query)
Interesting new usage: _handler.Handle(_validCommand, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> _validCommand:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(_validCommand)
Interesting new usage: _handler.Handle(TestHelper.Clone(_validCommand), new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> TestHelper.Clone(_validCommand):Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(TestHelper.Clone(_validCommand))
Interesting new usage: _sut.Handle(command, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> command:Argument
Log: Subsititution: Handle:IdentifierName -> _sut.Handle:SimpleMemberAccessExpression
Correponding input: _sut.Handle(command)
Interesting new usage: _handler.Handle(_exampleValidCommand, new CancellationToken())
Log: Subsititution: cancellationToken:IdentifierName -> new CancellationToken():ObjectCreationExpression
Log: Subsititution: request:Argument -> _exampleValidCommand:Argument
Log: Subsititution: Handle:IdentifierName -> _handler.Handle:SimpleMemberAccessExpression
Correponding input: _handler.Handle(_exampleValidCommand)
Log: Input to synthesize the program:
Log: _sut.Handle(command)
Log: ---------------------
Log: _sut.Handle(command, CancellationToken.None)
Log: _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId })
Log: ---------------------
Log: _sut.Handle(new ArchetypeByIdQuery { ArchetypeId = archetypeId }, CancellationToken.None)
Log: _sut.Handle(new CardByNameQuery { Name = cardName })
Log: ---------------------
Log: _sut.Handle(new CardByNameQuery { Name = cardName }, CancellationToken.None)
Log: _sut.Handle(query)
Log: ---------------------
Log: _sut.Handle(query, CancellationToken.None)
Log: _sut.Handle(new AllCategoriesQuery())
Log: ---------------------
Log: _sut.Handle(new AllCategoriesQuery(), CancellationToken.None)
Log: _sut.Handle(new LatestBanlistQuery())
Log: ---------------------
Log: _sut.Handle(new LatestBanlistQuery(), CancellationToken.None)
Log: _sut.Handle(new AllLimitsQuery())
Log: ---------------------
Log: _sut.Handle(new AllLimitsQuery(), CancellationToken.None)
Log: _sut.Handle(new AllFormatsQuery())
Log: ---------------------
Log: _sut.Handle(new AllFormatsQuery(), CancellationToken.None)
Log: _sut.Handle(new AllAttributesQuery())
Log: ---------------------
Log: _sut.Handle(new AllAttributesQuery(), CancellationToken.None)
Log: _sut.Handle(new AllTypesQuery())
Log: ---------------------
Log: _sut.Handle(new AllTypesQuery(), CancellationToken.None)
Log: old usage is handler.Handle(resetSecurityStamp)
Log: predict is handler.Handle(resetSecurityStamp, CancellationToken.None)
Log: old usage is handler.Handle(resetSecurityStamp)
Log: predict is handler.Handle(resetSecurityStamp, CancellationToken.None)
Log: old usage is requestHandler.Handle(request)
Log: predict is requestHandler.Handle(request, CancellationToken.None)
Log: old usage is requestHandler.Handle(request)
Log: predict is requestHandler.Handle(request, CancellationToken.None)
Log: old usage is handler.Handle(sentRequest)
Log: predict is handler.Handle(sentRequest, CancellationToken.None)
Log: old usage is handler.Handle(sentRequest)
Log: predict is handler.Handle(sentRequest, CancellationToken.None)
total correct cases : 0 totalTestCases 0 Successful rate is 0
The successful rate for transforming old usages: 6 / 6
